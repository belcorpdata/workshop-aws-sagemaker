AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create Api and respective lambda
Parameters:
  AppEnv:
    Type: String
    Description: 'application environment (lowercase only), ex: dev, qas, prd'
    AllowedValues:
      - prd
      - qas
      - dev
  Project: 
    Type: String
    Description: User name  
    Default: workshop
  SageMakerEndpoint:
    Type: String
    Description: Sagemaker Inference endpoint
Resources:
  IAMResource:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: role-${Project}-solution-${AppEnv}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies: 
      - PolicyName: 
          Fn::Sub: LambdaEndpoint${Project}Policy
        PolicyDocument:
          Statement: 
          - Effect: Allow
            Action: 
            - sagemaker:invokeEndpoint
            Resource: "*"
  ApiGatewayLambdaRes:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      FunctionName:
        Fn::Sub: lambda-sagemaker-${Project}-${AppEnv}
      Role: !GetAtt IAMResource.Arn
      Runtime: python3.8
      Timeout: 25
      Environment:
        Variables:
          SAGEMAKER_ENDPOINT: !Ref SageMakerEndpoint
      Code:
        ZipFile: |
          import os
          import io
          import boto3
          import json
          import csv
          import botocore

          # grab environment variables
          runtime = boto3.client('runtime.sagemaker')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              
              data = json.loads(json.dumps(event))
              payload = data['body']
              print(f"Api request payload: {payload}")
              
              try: 
                response = runtime.invoke_endpoint(
                                EndpointName=os.environ['SAGEMAKER_ENDPOINT'],
                                ContentType='text/csv',
                                Body=payload)
                print(f"Sagemaker response: {response}")
                result = json.loads(response['Body'].read().decode())
                print(result)
                pred = result['predictions'][0]['score']

                response = get_response_message(200,pred)
              except botocore.exceptions.ClientError as e: 
                print(f"Error while getting predict: {str(e)}")
                response = get_response_message(400,-1,str(e))
              
              return response

          def get_response_message(status,prediction, message="None"):
            resp_hash = {}
            resp_hash['success'] = (status == 200)
            resp_hash['age_prediction'] = prediction
            resp_hash['failure_reason'] = message
            if status==400:
                resp_hash['success'] = False
                resp_hash['failure_reason'] = message
            
            return {
                'statusCode': status,
                'body': json.dumps(resp_hash)
            }
  LambdaPermission:
    DependsOn: ApiGatewayLambdaRes
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::Sub: lambda-sagemaker-${Project}-${AppEnv}
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRes}/*
  ApiGatewayRes:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
        - REGIONAL
      Description: Api Gateway
      Name:
        Fn::Sub: apigateway-${Project}-${AppEnv}
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt IAMResource.Arn
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ExecutionMethod
    Properties:
      RestApiId:
        Ref: ApiGatewayRes
      StageName:
        Ref: AppEnv
  ProcessInput:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGatewayRes
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRes
        - RootResourceId
      PathPart: api
  ExecutionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGatewayRes
      ParentId:
        Ref: ProcessInput
      PathPart: prediction
  ExecutionMethod:
    DependsOn: ApiGatewayLambdaRes
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGatewayRes
      ResourceId:
        Ref: ExecutionResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - ApiGatewayLambdaRes
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: "$input.json('$.body')"